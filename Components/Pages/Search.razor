@page "/search"
@using System.Text.Json
@using System.Text.Json.Serialization
@using dpOnDotnet.Components.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h2>Search</h2>

@if(string.IsNullOrEmpty(searchQuery)) {
    <h5>Enter your search query</h5>
}

@if (searchResults != null && !string.IsNullOrEmpty(searchQuery)) {
    <h5>@searchResults.Count videos found with query "@searchQuery"</h5>
    
    <!-- Instead of foreach loop, use the LibraryView component -->
    <dpOnDotnet.Components.Modules.LibraryView Videos="@searchResults" />
}
@if(searchResults == null) {
    <h1>No results for @searchQuery</h1>
}
else if (isSearching && !string.IsNullOrEmpty(searchQuery))
{
    <p>Please wait...</p>
}

@code {
    private readonly string API = "https://api.darelisme.my.id";
    private string? searchQuery;
    private List<FetchedData> searchResults = new List<FetchedData>();
    private bool isSearching;
    private System.Threading.Timer? debounceTimer;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await HandleLocationChanged();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _ = HandleLocationChanged();
    }

    private async Task HandleLocationChanged()
    {
        isSearching = true;
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        searchQuery = query.Get("q") ?? string.Empty;

        if (!string.IsNullOrEmpty(searchQuery)) {
            await FetchSearchResults();
        }
        isSearching = false;
        StateHasChanged(); 
    }

    private async Task FetchSearchResults()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            searchResults = await FetchSearchResultsAsync(searchQuery);
        }
        else
        {
            searchResults = new List<FetchedData>();
        }
    }

    private async Task<List<FetchedData>> FetchSearchResultsAsync(string query)
    {
        try
        {
            // Use direct IP address for fetching videos
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            
            var response = await Http.GetFromJsonAsync<Response>(
                $"http://10.10.10.10:328/dp/search?q={query}", options);
            isSearching = false;
            return response?.data ?? new List<FetchedData>();
        }
        catch (Exception ex)
        {
            isSearching = false;
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            return new List<FetchedData>();
        }
    }
}