@page "/"
@inject NavigationManager Navigation
@page "/relativetime"
@using System.Globalization
@using System.Text.Json
@using dpOnDotnet.Components.Models

<PageTitle>darel's Project Home</PageTitle>
<HeadContent>
    <meta name="robots" content="index, follow">
    <meta name="type" content="website">
    <meta name="og:title" content="darel's Video Project">
    <meta name="description" content="Watch all of my archived video works on darel's Project">
    <meta name="og:description" content="Watch all of my archived video works on darel's Project">
    <meta name="twitter:title" content="darel's Video Project">
    <meta name="twitter:description" content="Watch all of my archived video works on darel's Project">
    <meta name="keywords" content="darelisme, dp, darelisme projects, projects, darelc, darelc_, darel's project, dws, web">
</HeadContent>

<dpOnDotnet.Components.Modules.LibraryView 
    Videos="@fetchedVideos" 
    IsLoading="@isLoading" 
    ErrorMessage="@errorMessage" 
    Title="Welcome to darel's Projects"
    Subtitle="What do you want to watch today?"
    ApiBaseUrl="@API" />

@code {
    private readonly string API = "https://api.darelisme.my.id";
    private readonly HttpClient httpClient = new HttpClient();
    private bool isLoading = true;
    private string errorMessage = "";
    private List<FetchedData> fetchedVideos = new();

    protected override async Task OnInitializedAsync() {
        isLoading = true;
        try {
            var response = await httpClient.GetAsync("http://10.10.10.10:328/dp?sortBy=desc");
            if (response.IsSuccessStatusCode) {
                var responseContent = await response.Content.ReadAsStringAsync();
                
                // Use intermediate class with string date field
                var tempData = JsonSerializer.Deserialize<List<TempFetchedData>>(responseContent);
                fetchedVideos = new List<FetchedData>();
                
                if (tempData != null)
                {
                    foreach (var item in tempData)
                    {
                        try {
                            // Store both string date and parsed DateTime
                            DateTime parsedDate = DateTime.ParseExact(
                                item.created.Substring(0, 19),
                                "yyyy-MM-dd HH:mm:ss", 
                                System.Globalization.CultureInfo.InvariantCulture
                            );
                            
                            fetchedVideos.Add(new FetchedData {
                                created = item.created,
                                createdDate = parsedDate,
                                id = item.id,
                                category = item.category,
                                yt_data = new YtData {
                                    title = item.yt_data?.title,
                                    videoThumbnails = item.yt_data?.videoThumbnails?.Select(t => new Thumbnail { url = t.url }).ToList(),
                                    description = item.yt_data?.description
                                },
                                title = item.title,
                                total_views = item.total_views
                            });
                        }
                        catch {
                            // Fallback with just the string date
                            fetchedVideos.Add(new FetchedData {
                                created = item.created,
                                id = item.id,
                                category = item.category,
                                yt_data = new YtData {
                                    title = item.yt_data?.title,
                                    videoThumbnails = item.yt_data?.videoThumbnails?.Select(t => new Thumbnail { url = t.url }).ToList(),
                                    description = item.yt_data?.description
                                },
                                title = item.title,
                                total_views = item.total_views
                            });
                        }
                    }
                }
                
                isLoading = false;
            }
            isLoading = false;
        } catch (Exception ex) {
            isLoading = false;
            errorMessage = $"{ex.Message}";
        }
    }

    // Add this class for temporary deserialization
    public class TempFetchedData {
        public string created { get; set; } = "";
        public string id { get; set; } = "";
        public string[]? category { get; set; }
        public TempYtData? yt_data { get; set; }
        public string title { get; set; } = "";
        public int total_views { get; set; }
    }
    
    public class TempYtData {
        public string? title { get; set; }
        public List<TempThumbnail>? videoThumbnails { get; set; }
        public string? description { get; set; }
    }
    
    public class TempThumbnail {
        public string url { get; set; } = "";
    }
}