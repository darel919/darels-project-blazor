

<main id="componentParent">
    @if(fetchedVideos != null) {
        @foreach (var video in fetchedVideos) { 
            <a href="/watch?v=@video.content_id">
                <div class="videoPage" title="@video.title">
                    @if(@video.thumbnail != null) {
                        <img class="imgThumbnail" loading="lazy" src="@API/@video.thumbnail" alt="Thumbnail" width=200/>
                    } else {
                        <img class="imgThumbnail" loading="lazy" src="@API/dp/thumb?id=@video.content_id" alt="Thumbnail" width=200/>
                    }
                    <div>
                        <h2>@video.title</h2>
                        <h6>Recorded at: @video.created_at</h6>
                        @if(video.total_views>0) {
                            <h6>@video.total_views views</h6>
                        } else {
                            <h6>No views</h6>
                        }
                    </div>
                </div>
            </a>
        }
    } else {
        <FluentProgressRing></FluentProgressRing>
        <p>Loading recommendations...</p>
    }
</main>

@code {
    private readonly string API = "https://api.darelisme.my.id";
    [Parameter]
    public string CurrentVideoId { get; set; } // Parameter to receive current video ID

    private readonly HttpClient httpClient = new HttpClient();
    public List<FetchedData> fetchedVideos;

    public class FetchedData {
        public DateTime created_at { get; set; }
        public string vid_uid { get; set; }
        public string content_id { get; set; }
        public string submittedBy { get; set; }
        public YTData ytData { get; set; }
        public string thumbnail {get; set;}
        public string title {get; set;}
        public int total_views {get; set;}
    }

    public class YTData {
        public string title { get; set; }
        public List<Thumbnail> videoThumbnails { get; set; }
        public string description { get; set; }
    }

    public class Thumbnail {
        public string url { get; set; }
    }

    protected override async Task OnParametersSetAsync() {
        await FetchData();
    }

   public async Task FetchData()
{
    try
    {
        var apiUrl = $"http://10.10.10.10:328/dp/recommendations";

        var request = new HttpRequestMessage(HttpMethod.Get, apiUrl);
        request.Headers.Add("requestId", CurrentVideoId);

        var response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            fetchedVideos = await response.Content.ReadFromJsonAsync<List<FetchedData>>();
        }
        else
        {
            Console.WriteLine($"Error fetching data: {response.ReasonPhrase}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error fetching data: {ex.Message}");
    }
}

}
