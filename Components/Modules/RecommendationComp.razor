@page "/relativetime"
@using System.Text.Json
@using System.Globalization
@using System.Net.Http.Json
@using dpOnDotnet.Components.Models
@using dpOnDotnet.Components.Modules

<main id="componentParent">
    @if(fetchedVideos != null) {
        @foreach (var video in fetchedVideos) { 
            <a href="/watch?v=@video.id">
                <div class="videoPage" title="@video.title">
                    <img class="imgThumbnail" loading="lazy" src="@API/dp/thumb?id=@video.id" alt="Thumbnail" width=200/>
                    <div>
                        <h2>@video.title</h2>
                        <h6>@video.created.GetTimeAgo()</h6>
                        @if(video.total_views > 0) {
                            <h6>@video.total_views views</h6>
                        } else {
                            <h6>No views</h6>
                        }
                    </div>
                </div>
            </a>
        }
    } else {
        <FluentProgressRing></FluentProgressRing>
        @* <p>Unable to get recommendations for this video.</p> *@
    }
</main>

@code {
    private readonly string API = "https://api.darelisme.my.id";
    [Parameter]
    public string CurrentVideoId { get; set; } // Parameter to receive current video ID

    private readonly HttpClient httpClient = new HttpClient();
    public List<FetchedData> fetchedVideos;

    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        try
        {
            var apiUrl = $"http://10.10.10.10:328/dp/recommendations";

            var request = new HttpRequestMessage(HttpMethod.Get, apiUrl);
            request.Headers.Add("requestId", CurrentVideoId);

            var response = await httpClient.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                
                // Directly deserialize to the FetchedData objects
                fetchedVideos = JsonSerializer.Deserialize<List<FetchedData>>(responseContent, options);
            }
            else
            {
                Console.WriteLine($"Error fetching data: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            fetchedVideos = new List<FetchedData>();
        }
    }
}