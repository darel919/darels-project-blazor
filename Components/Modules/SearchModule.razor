@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<main>
    <div class="search-container">
        <FluentSearch @bind-Value="searchQuery" @bind-Value:after="HandleSearchInput" 
        Placeholder="Search" AutoComplete="true" Immediate="true" 
        Size="35"
        @onkeydown="HandleKeyPress" Id="searchInput"></FluentSearch>
    </div>
    @if (!string.IsNullOrWhiteSpace(searchQuery) && searchTitles != null)
    {
        <div class="listbox-container">
            <FluentListbox Id="searchResults" Immediate="true" aria-label="search results" 
            Items="@searchTitles.Select(t => t.Title).ToList()" TOption="string" 
            SelectedOptionChanged="@(e => OnItemSelected(e))" />
        </div>
    }
</main>

@code {
    private string searchQuery;
    private List<SearchResult> searchTitles = new List<SearchResult>();
    private Timer debounceTimer;
    private const int DebounceDelay = 250; // 750ms delay

    public class SearchResult
    {
        public string Title { get; set; }
        public string ContentId { get; set; }
    }

    private void OnItemSelected(string selectedTitle)
    {
        var selectedResult = searchTitles.FirstOrDefault(t => t.Title == selectedTitle);
        if (selectedResult != null)
        {
            searchQuery = string.Empty; // Clear search query
            Navigation.NavigateTo("/watch?v=" + selectedResult.ContentId);
        }
    }

    private async Task HandleSearchInput()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            debounceTimer?.Dispose(); // Reset the timer
            debounceTimer = new Timer(async _ =>
            {
            try{
                var response = await Http.GetFromJsonAsync<Response>($"http://10.10.10.10:328/dp/search?q={searchQuery}");
                searchTitles = response?.data.Select(d => new SearchResult
                {
                    Title = d.yt_data.title,
                    ContentId = d.id
                }).ToList() ?? new List<SearchResult>();
            } catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }
                await InvokeAsync(StateHasChanged);
            }, null, DebounceDelay, Timeout.Infinite);
        }
    }

    public class Response
    {
        public List<FetchedData> data { get; set; }
    }

    public class FetchedData
    {
        public string id { get; set; }
        public yt_data yt_data { get; set; }
    }

    public class yt_data
    {
        public string title { get; set; }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
        {
            if (e.Key == "Enter")
            {
                GoSearch();
            }
    }
    private void GoSearch()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            Navigation.NavigateTo("/search?q=" + searchQuery);
        }
    }
}
